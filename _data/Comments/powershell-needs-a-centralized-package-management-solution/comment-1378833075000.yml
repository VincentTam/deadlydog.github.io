name: Zach Bonham
date: '2013-09-10 11:11:15'
url: ''
message: "Just some thoughts on the subject.  This comes up every so often with teams that I've worked with that write PowerShell.  How to share code?  Most don't.  Or copy pasta like you describe.\r\n\r\nA few of us have tried sharing code using 'dot' sourced libraries.  This allowed us to get latest of a project in version control, and either branch or copy into our 'project'.  PowerShell modules seemed to require too much overhead for what we were trying to accomplish.  Plus, I don't think any of us really understood, in a typical enterprise, why we'd want to bother?  We seemed to strike the right balance thru dot sourcing.\r\n\r\nWe typically followed the convention of having a top level [lib].ps1, which just \r\n\r\n.\\yourlib.ps1\r\n.\\supportingfiles.ps1\r\n.\\modules\\shared(s).ps1\r\n\r\nIdeally, we would have liked to been able to do:\r\n\r\nps-get 'sqlclient' \r\n\r\nand have our sql client data access module dropped into the current folder.\r\n\r\n.\\mylib.ps1\r\n.\\modules\\sqlclient.ps1\r\n\r\nThough, we'd probably want to have a manifest (gemfile) which contained the versions we depended on, etc. - this could be where PowerShell modules would come into play?  We handled versions through source control.\r\n\r\nI'd be curious to see if the problem could be solved using an format (nuget/chocolatey) rather than spinning off a new one or waiting for OEM solution - though I'll be the first to admit that I'm not exactly thrilled with general purpose package manager options on Windows."
email: f4762f659c91fa7553838ffa932a51d9
