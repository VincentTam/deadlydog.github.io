name: deadlydog
date: '2013-09-10 14:18:08'
url: 'http://www.danskingdom.com'
message: "<a href=\"#comment-8421\" rel=\"nofollow\">@Zach Bonham </a> \r\nThanks for sharing your thoughts Zach.  In terms of Dot Sourcing vs Modules, http://stackoverflow.com/questions/14882332/powershell-import-module-vs-dot-sourcing has some great information.  Basically the big differences that I see are:\r\n\r\n1. Modules can have \"private\" functions; that is you can explicitly control what variables and functions you want to expose to users of the module. This is great when creating a library, as you likely want to have some private functions for internal use that aren't meant to be called directly by users of the library.  This may not be a problem for you when only distributing scripts to your own small team, but quickly becomes a problem when creating general purpose modules meant to be used by anybody/everybody.\r\n\r\n2. Dot sourcing can actually run a script, whereas modules are purely for importing functions that your script is meant to explicitly call.  I often think of dot sourcing like an \"include\" in php; that is, it is pretty much copy/pasting to dot sourced code into your script, so any code that is not encapsulated in a function will be ran; so dot sourced scripts can actually be used to do some work.  Modules on the other hand are more like a \"using\" statement in C#, in that they just import a collection of functions that you can call; the Import-Module statement doesn't do anything on its own.\r\n\r\n3. Modules are namespaced, ensuring conflicts don't occur when importing many modules; if 2 scripts that you dot source have the same function name, they will conflict.\r\n\r\n4. As of PowerShell v3, you don't have to use Import-Module anymore; as long as the module is placed in a file in your $env:PSModulePath it can find it automatically.  This applies to intellisense too, which can be a great feature.  With dot sourcing, you actually have to run the dot source line once to import it into your session before you can take advantage of intellisense.\r\n\r\nSo dot sourcing and modules are similar, but serve two different purposes.\r\n\r\nAs for using NuGet or Chocolatey, this is definitely an option for packaging and distributing your module and it's dependencies to make it easier for the recipients, but there is still work on the end users part to find the package, download it, and install it properly to the proper location.  With full native integration, it would be possible to just add one line to your script, such as \"Get-DependencyModule SomeModuleID-Version\", to have it automatically do all of this work for you and the end user.  Essentially I could email my script to someone and they just double-click it to run it and everything just works (perhaps they would get a prompt where they have to confirm downloading the module or something).\r\n\r\nGreat questions. Thanks for sharing your thoughts!"
email: c8addda594c8b338f1e3934e73505d0c
